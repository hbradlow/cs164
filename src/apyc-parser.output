Nonterminals useless in grammar

   dict
   compare
   expr_list
   file
   list
   tuple
   iterable
   function


Terminals unused in grammar

   INT
   STRING
   "@println"
   "@expr_list"
   "@module"
   "@if_stmt"
   "@boolean_stmt"
   "@=="
   "@>"
   "@<"
   "@>="
   "@<="
   DICT
   LIST
   TUPLE
   RAWSTRING


Rules useless in grammar

   39 dict: /* empty */

   40 compare: "@=="
   41        | "@<="
   42        | "@>="
   43        | "@<"
   44        | "@>"

   45 expr_list: /* empty */

   46 file: /* empty */

   47 list: /* empty */

   48 tuple: /* empty */

   49 iterable: expr_list

   50 function: /* empty */

   51 iterable: list
   52         | string
   53         | tuple
   54         | dict
   55         | file


Rules useless in parser due to conflicts

   26 literal: NUMERIC_LITERAL

   34 expression_list: /* empty */


State 0 conflicts: 11 shift/reduce
State 6 conflicts: 5 shift/reduce, 18 reduce/reduce
State 7 conflicts: 18 reduce/reduce
State 10 conflicts: 1 reduce/reduce
State 14 conflicts: 11 shift/reduce
State 24 conflicts: 5 shift/reduce
State 43 conflicts: 1 shift/reduce
State 50 conflicts: 11 shift/reduce
State 52 conflicts: 5 shift/reduce
State 53 conflicts: 11 shift/reduce
State 64 conflicts: 11 shift/reduce
State 67 conflicts: 11 shift/reduce
State 80 conflicts: 11 shift/reduce
State 81 conflicts: 11 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt_list: stmt stmt_list
    3          | EMPTY

    4 stmt: if_stmt
    5     | while_stmt
    6     | def_stmt
    7     | for_stmt
    8     | expression

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt
   11          | EMPTY
   12          | "else" bool_stmt ":" INDENT stmt_list DEDENT

   13 bool_stmt: expression "@compare" bool_stmt
   14          | "(" bool_stmt ")"
   15          | expression

   16 while_stmt: WHILE bool_stmt "@:" INDENT stmt_list DEDENT

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT stmt_list DEDENT

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT

   19 parameter_list: parameter "," parameter_list
   20               | parameter

   21 parameter: ID
   22          | ID "@=" expression

   23 literal: string_literal
   24        | NUMERIC_LITERAL

   25 string_literal: string

   26 literal: NUMERIC_LITERAL
   27        | STRING_LITERAL

   28 string: /* empty */

   29 expression: literal
   30           | FUNCTION_NAME expression_list
   31           | ID "@=" expression

   32 literal: INT_LITERAL

   33 expression_list: expression __0
   34                | /* empty */

   35 stmt_list: print_stmt "\n"

   36 print_stmt: "print" expression_list

   37 __0: /* empty */
   38    | __0 "," expression


Terminals, with rules where they appear

$end (0) 0
"\n" (10) 35
"(" (40) 14
")" (41) 14
":" (58) 9 10 12
error (256)
INT (258)
STRING (259)
ID (260) 17 21 22 31
"@println" (261)
EMPTY (262) 3 11
"@expr_list" (263)
"@module" (264)
"@if_stmt" (265)
"@boolean_stmt" (266)
"@iterable" (267) 17
"@(" (268) 18
"@)" (269) 18
"@:" (270) 16 17 18
"@compare" (271) 13
"@=" (272) 22 31
"@==" (273)
"@>" (274)
"@<" (275)
"@>=" (276)
"@<=" (277)
"," (278) 19 38
DEDENT (279) 9 10 12 16 17 18
DEF (280) 18
FOR (281) 17
IN (282) 17
INDENT (283) 9 10 12 16 17 18
WHILE (284) 16
DICT (285)
FUNCTION_NAME (286) 18 30
LIST (287)
NUMERIC_LITERAL (288) 24 26
STRING_LITERAL (289) 27
TUPLE (290)
"elif" (291) 10
"else" (292) 12
"if" (293) 9
"print" (294) 36
INT_LITERAL (295) 32
RAWSTRING (296)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
stmt_list (48)
    on left: 2 3 35, on right: 1 2 9 10 12 16 17 18
stmt (49)
    on left: 4 5 6 7 8, on right: 2
if_stmt (50)
    on left: 9, on right: 4
elif_stmt (51)
    on left: 10 11 12, on right: 9 10
bool_stmt (52)
    on left: 13 14 15, on right: 9 10 12 13 14 16
while_stmt (53)
    on left: 16, on right: 5
for_stmt (54)
    on left: 17, on right: 7
def_stmt (55)
    on left: 18, on right: 6
parameter_list (56)
    on left: 19 20, on right: 18 19
parameter (57)
    on left: 21 22, on right: 19 20
literal (58)
    on left: 23 24 26 27 32, on right: 29
string_literal (59)
    on left: 25, on right: 23
string (60)
    on left: 28, on right: 25
expression (61)
    on left: 29 30 31, on right: 8 13 15 22 31 33 38
expression_list (62)
    on left: 33 34, on right: 30 36
print_stmt (63)
    on left: 36, on right: 35
__0 (64)
    on left: 37 38, on right: 33 38


state 0

    0 $accept: . program $end

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    program         go to state 12
    stmt_list       go to state 13
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 1

   31 expression: ID . "@=" expression

    "@="  shift, and go to state 24


state 2

    3 stmt_list: EMPTY .

    $default  reduce using rule 3 (stmt_list)


state 3

   18 def_stmt: DEF . FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT

    FUNCTION_NAME  shift, and go to state 25


state 4

   17 for_stmt: FOR . ID IN "@iterable" "@:" INDENT stmt_list DEDENT

    ID  shift, and go to state 26


state 5

   16 while_stmt: WHILE . bool_stmt "@:" INDENT stmt_list DEDENT

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "("              shift, and go to state 27
    INT_LITERAL      shift, and go to state 11

    $default  reduce using rule 28 (string)

    bool_stmt       go to state 28
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 29


state 6

   30 expression: FUNCTION_NAME . expression_list

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    ID               [reduce using rule 34 (expression_list)]
    EMPTY            reduce using rule 28 (string)
    EMPTY            [reduce using rule 34 (expression_list)]
    "@)"             reduce using rule 28 (string)
    "@)"             [reduce using rule 34 (expression_list)]
    "@:"             reduce using rule 28 (string)
    "@:"             [reduce using rule 34 (expression_list)]
    "@compare"       reduce using rule 28 (string)
    "@compare"       [reduce using rule 34 (expression_list)]
    ","              reduce using rule 28 (string)
    ","              [reduce using rule 34 (expression_list)]
    DEF              reduce using rule 28 (string)
    DEF              [reduce using rule 34 (expression_list)]
    FOR              reduce using rule 28 (string)
    FOR              [reduce using rule 34 (expression_list)]
    WHILE            reduce using rule 28 (string)
    WHILE            [reduce using rule 34 (expression_list)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 34 (expression_list)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 34 (expression_list)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 34 (expression_list)]
    ")"              reduce using rule 28 (string)
    ")"              [reduce using rule 34 (expression_list)]
    ":"              reduce using rule 28 (string)
    ":"              [reduce using rule 34 (expression_list)]
    "\n"             reduce using rule 28 (string)
    "\n"             [reduce using rule 34 (expression_list)]
    "if"             reduce using rule 28 (string)
    "if"             [reduce using rule 34 (expression_list)]
    "print"          reduce using rule 28 (string)
    "print"          [reduce using rule 34 (expression_list)]
    INT_LITERAL      [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 34 (expression_list)]
    $default         reduce using rule 28 (string)

    literal          go to state 19
    string_literal   go to state 20
    string           go to state 21
    expression       go to state 30
    expression_list  go to state 31


state 7

   24 literal: NUMERIC_LITERAL .
   26        | NUMERIC_LITERAL .

    ID               reduce using rule 24 (literal)
    ID               [reduce using rule 26 (literal)]
    EMPTY            reduce using rule 24 (literal)
    EMPTY            [reduce using rule 26 (literal)]
    "@)"             reduce using rule 24 (literal)
    "@)"             [reduce using rule 26 (literal)]
    "@:"             reduce using rule 24 (literal)
    "@:"             [reduce using rule 26 (literal)]
    "@compare"       reduce using rule 24 (literal)
    "@compare"       [reduce using rule 26 (literal)]
    ","              reduce using rule 24 (literal)
    ","              [reduce using rule 26 (literal)]
    DEF              reduce using rule 24 (literal)
    DEF              [reduce using rule 26 (literal)]
    FOR              reduce using rule 24 (literal)
    FOR              [reduce using rule 26 (literal)]
    WHILE            reduce using rule 24 (literal)
    WHILE            [reduce using rule 26 (literal)]
    FUNCTION_NAME    reduce using rule 24 (literal)
    FUNCTION_NAME    [reduce using rule 26 (literal)]
    NUMERIC_LITERAL  reduce using rule 24 (literal)
    NUMERIC_LITERAL  [reduce using rule 26 (literal)]
    STRING_LITERAL   reduce using rule 24 (literal)
    STRING_LITERAL   [reduce using rule 26 (literal)]
    ")"              reduce using rule 24 (literal)
    ")"              [reduce using rule 26 (literal)]
    ":"              reduce using rule 24 (literal)
    ":"              [reduce using rule 26 (literal)]
    "\n"             reduce using rule 24 (literal)
    "\n"             [reduce using rule 26 (literal)]
    "if"             reduce using rule 24 (literal)
    "if"             [reduce using rule 26 (literal)]
    "print"          reduce using rule 24 (literal)
    "print"          [reduce using rule 26 (literal)]
    INT_LITERAL      reduce using rule 24 (literal)
    INT_LITERAL      [reduce using rule 26 (literal)]
    $default         reduce using rule 24 (literal)


state 8

   27 literal: STRING_LITERAL .

    $default  reduce using rule 27 (literal)


state 9

    9 if_stmt: "if" . bool_stmt ":" INDENT stmt_list DEDENT elif_stmt

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "("              shift, and go to state 27
    INT_LITERAL      shift, and go to state 11

    $default  reduce using rule 28 (string)

    bool_stmt       go to state 32
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 29


state 10

   36 print_stmt: "print" . expression_list

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    INT_LITERAL      shift, and go to state 11

    "\n"      reduce using rule 28 (string)
    "\n"      [reduce using rule 34 (expression_list)]
    $default  reduce using rule 28 (string)

    literal          go to state 19
    string_literal   go to state 20
    string           go to state 21
    expression       go to state 30
    expression_list  go to state 33


state 11

   32 literal: INT_LITERAL .

    $default  reduce using rule 32 (literal)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 34


state 13

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


state 14

    2 stmt_list: stmt . stmt_list

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    stmt_list       go to state 35
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 15

    4 stmt: if_stmt .

    $default  reduce using rule 4 (stmt)


state 16

    5 stmt: while_stmt .

    $default  reduce using rule 5 (stmt)


state 17

    7 stmt: for_stmt .

    $default  reduce using rule 7 (stmt)


state 18

    6 stmt: def_stmt .

    $default  reduce using rule 6 (stmt)


state 19

   29 expression: literal .

    $default  reduce using rule 29 (expression)


state 20

   23 literal: string_literal .

    $default  reduce using rule 23 (literal)


state 21

   25 string_literal: string .

    $default  reduce using rule 25 (string_literal)


state 22

    8 stmt: expression .

    $default  reduce using rule 8 (stmt)


state 23

   35 stmt_list: print_stmt . "\n"

    "\n"  shift, and go to state 36


state 24

   31 expression: ID "@=" . expression

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]
    $default         reduce using rule 28 (string)

    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 37


state 25

   18 def_stmt: DEF FUNCTION_NAME . "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT

    "@("  shift, and go to state 38


state 26

   17 for_stmt: FOR ID . IN "@iterable" "@:" INDENT stmt_list DEDENT

    IN  shift, and go to state 39


state 27

   14 bool_stmt: "(" . bool_stmt ")"

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "("              shift, and go to state 27
    INT_LITERAL      shift, and go to state 11

    $default  reduce using rule 28 (string)

    bool_stmt       go to state 40
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 29


state 28

   16 while_stmt: WHILE bool_stmt . "@:" INDENT stmt_list DEDENT

    "@:"  shift, and go to state 41


state 29

   13 bool_stmt: expression . "@compare" bool_stmt
   15          | expression .

    "@compare"  shift, and go to state 42

    $default  reduce using rule 15 (bool_stmt)


state 30

   33 expression_list: expression . __0

    $default  reduce using rule 37 (__0)

    __0  go to state 43


state 31

   30 expression: FUNCTION_NAME expression_list .

    $default  reduce using rule 30 (expression)


state 32

    9 if_stmt: "if" bool_stmt . ":" INDENT stmt_list DEDENT elif_stmt

    ":"  shift, and go to state 44


state 33

   36 print_stmt: "print" expression_list .

    $default  reduce using rule 36 (print_stmt)


state 34

    0 $accept: program $end .

    $default  accept


state 35

    2 stmt_list: stmt stmt_list .

    $default  reduce using rule 2 (stmt_list)


state 36

   35 stmt_list: print_stmt "\n" .

    $default  reduce using rule 35 (stmt_list)


state 37

   31 expression: ID "@=" expression .

    $default  reduce using rule 31 (expression)


state 38

   18 def_stmt: DEF FUNCTION_NAME "@(" . parameter_list "@)" "@:" INDENT stmt_list DEDENT

    ID  shift, and go to state 45

    parameter_list  go to state 46
    parameter       go to state 47


state 39

   17 for_stmt: FOR ID IN . "@iterable" "@:" INDENT stmt_list DEDENT

    "@iterable"  shift, and go to state 48


state 40

   14 bool_stmt: "(" bool_stmt . ")"

    ")"  shift, and go to state 49


state 41

   16 while_stmt: WHILE bool_stmt "@:" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 50


state 42

   13 bool_stmt: expression "@compare" . bool_stmt

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "("              shift, and go to state 27
    INT_LITERAL      shift, and go to state 11

    $default  reduce using rule 28 (string)

    bool_stmt       go to state 51
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 29


state 43

   33 expression_list: expression __0 .
   38 __0: __0 . "," expression

    ","  shift, and go to state 52

    ","       [reduce using rule 33 (expression_list)]
    $default  reduce using rule 33 (expression_list)


state 44

    9 if_stmt: "if" bool_stmt ":" . INDENT stmt_list DEDENT elif_stmt

    INDENT  shift, and go to state 53


state 45

   21 parameter: ID .
   22          | ID . "@=" expression

    "@="  shift, and go to state 54

    $default  reduce using rule 21 (parameter)


state 46

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list . "@)" "@:" INDENT stmt_list DEDENT

    "@)"  shift, and go to state 55


state 47

   19 parameter_list: parameter . "," parameter_list
   20               | parameter .

    ","  shift, and go to state 56

    $default  reduce using rule 20 (parameter_list)


state 48

   17 for_stmt: FOR ID IN "@iterable" . "@:" INDENT stmt_list DEDENT

    "@:"  shift, and go to state 57


state 49

   14 bool_stmt: "(" bool_stmt ")" .

    $default  reduce using rule 14 (bool_stmt)


state 50

   16 while_stmt: WHILE bool_stmt "@:" INDENT . stmt_list DEDENT

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    stmt_list       go to state 58
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 51

   13 bool_stmt: expression "@compare" bool_stmt .

    $default  reduce using rule 13 (bool_stmt)


state 52

   38 __0: __0 "," . expression

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]
    $default         reduce using rule 28 (string)

    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 59


state 53

    9 if_stmt: "if" bool_stmt ":" INDENT . stmt_list DEDENT elif_stmt

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    stmt_list       go to state 60
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 54

   22 parameter: ID "@=" . expression

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    INT_LITERAL      shift, and go to state 11

    $default  reduce using rule 28 (string)

    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 61


state 55

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" . "@:" INDENT stmt_list DEDENT

    "@:"  shift, and go to state 62


state 56

   19 parameter_list: parameter "," . parameter_list

    ID  shift, and go to state 45

    parameter_list  go to state 63
    parameter       go to state 47


state 57

   17 for_stmt: FOR ID IN "@iterable" "@:" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 64


state 58

   16 while_stmt: WHILE bool_stmt "@:" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 65


state 59

   38 __0: __0 "," expression .

    $default  reduce using rule 38 (__0)


state 60

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list . DEDENT elif_stmt

    DEDENT  shift, and go to state 66


state 61

   22 parameter: ID "@=" expression .

    $default  reduce using rule 22 (parameter)


state 62

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 67


state 63

   19 parameter_list: parameter "," parameter_list .

    $default  reduce using rule 19 (parameter_list)


state 64

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT . stmt_list DEDENT

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    stmt_list       go to state 68
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 65

   16 while_stmt: WHILE bool_stmt "@:" INDENT stmt_list DEDENT .

    $default  reduce using rule 16 (while_stmt)


state 66

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list DEDENT . elif_stmt

    EMPTY   shift, and go to state 69
    "elif"  shift, and go to state 70
    "else"  shift, and go to state 71

    elif_stmt  go to state 72


state 67

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT . stmt_list DEDENT

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    stmt_list       go to state 73
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 68

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 74


state 69

   11 elif_stmt: EMPTY .

    $default  reduce using rule 11 (elif_stmt)


state 70

   10 elif_stmt: "elif" . bool_stmt ":" INDENT stmt_list DEDENT elif_stmt

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "("              shift, and go to state 27
    INT_LITERAL      shift, and go to state 11

    $default  reduce using rule 28 (string)

    bool_stmt       go to state 75
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 29


state 71

   12 elif_stmt: "else" . bool_stmt ":" INDENT stmt_list DEDENT

    ID               shift, and go to state 1
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "("              shift, and go to state 27
    INT_LITERAL      shift, and go to state 11

    $default  reduce using rule 28 (string)

    bool_stmt       go to state 76
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 29


state 72

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt .

    $default  reduce using rule 9 (if_stmt)


state 73

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 77


state 74

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT stmt_list DEDENT .

    $default  reduce using rule 17 (for_stmt)


state 75

   10 elif_stmt: "elif" bool_stmt . ":" INDENT stmt_list DEDENT elif_stmt

    ":"  shift, and go to state 78


state 76

   12 elif_stmt: "else" bool_stmt . ":" INDENT stmt_list DEDENT

    ":"  shift, and go to state 79


state 77

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT .

    $default  reduce using rule 18 (def_stmt)


state 78

   10 elif_stmt: "elif" bool_stmt ":" . INDENT stmt_list DEDENT elif_stmt

    INDENT  shift, and go to state 80


state 79

   12 elif_stmt: "else" bool_stmt ":" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 81


state 80

   10 elif_stmt: "elif" bool_stmt ":" INDENT . stmt_list DEDENT elif_stmt

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    stmt_list       go to state 82
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 81

   12 elif_stmt: "else" bool_stmt ":" INDENT . stmt_list DEDENT

    ID               shift, and go to state 1
    EMPTY            shift, and go to state 2
    DEF              shift, and go to state 3
    FOR              shift, and go to state 4
    WHILE            shift, and go to state 5
    FUNCTION_NAME    shift, and go to state 6
    NUMERIC_LITERAL  shift, and go to state 7
    STRING_LITERAL   shift, and go to state 8
    "if"             shift, and go to state 9
    "print"          shift, and go to state 10
    INT_LITERAL      shift, and go to state 11

    ID               [reduce using rule 28 (string)]
    EMPTY            [reduce using rule 28 (string)]
    DEF              [reduce using rule 28 (string)]
    FOR              [reduce using rule 28 (string)]
    WHILE            [reduce using rule 28 (string)]
    FUNCTION_NAME    [reduce using rule 28 (string)]
    NUMERIC_LITERAL  [reduce using rule 28 (string)]
    STRING_LITERAL   [reduce using rule 28 (string)]
    "if"             [reduce using rule 28 (string)]
    "print"          [reduce using rule 28 (string)]
    INT_LITERAL      [reduce using rule 28 (string)]

    stmt_list       go to state 83
    stmt            go to state 14
    if_stmt         go to state 15
    while_stmt      go to state 16
    for_stmt        go to state 17
    def_stmt        go to state 18
    literal         go to state 19
    string_literal  go to state 20
    string          go to state 21
    expression      go to state 22
    print_stmt      go to state 23


state 82

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list . DEDENT elif_stmt

    DEDENT  shift, and go to state 84


state 83

   12 elif_stmt: "else" bool_stmt ":" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 85


state 84

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list DEDENT . elif_stmt

    EMPTY   shift, and go to state 69
    "elif"  shift, and go to state 70
    "else"  shift, and go to state 71

    elif_stmt  go to state 86


state 85

   12 elif_stmt: "else" bool_stmt ":" INDENT stmt_list DEDENT .

    $default  reduce using rule 12 (elif_stmt)


state 86

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt .

    $default  reduce using rule 10 (elif_stmt)
