Nonterminals useless in grammar

   dict
   compare
   expr_list
   file
   list
   tuple
   iterable
   function
   string


Terminals unused in grammar

   INT
   STRING
   "@println"
   "@expr_list"
   "@literal"
   "@module"
   "@if_stmt"
   "@boolean_stmt"
   "@=="
   "@>"
   "@<"
   "@>="
   "@<="
   DICT
   LIST
   NUMERIC_LITERAL
   TUPLE
   RAWSTRING


Rules useless in grammar

   34 dict: /* empty */

   35 compare: "@=="
   36        | "@<="
   37        | "@>="
   38        | "@<"
   39        | "@>"

   40 expr_list: /* empty */

   41 file: /* empty */

   42 list: /* empty */

   43 tuple: /* empty */

   44 iterable: expr_list

   45 function: /* empty */

   46 string: STRING_LITERAL

   47 iterable: list
   48         | string
   49         | tuple
   50         | dict
   51         | file


State 6 conflicts: 4 shift/reduce
State 40 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt_list: stmt stmt_list
    3          | EMPTY

    4 stmt: if_stmt
    5     | while_stmt
    6     | def_stmt
    7     | for_stmt
    8     | expression

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt
   11          | EMPTY
   12          | "else" bool_stmt ":" INDENT stmt_list DEDENT

   13 bool_stmt: expression "@compare" bool_stmt
   14          | "(" bool_stmt ")"
   15          | expression

   16 while_stmt: WHILE bool_stmt "@:" INDENT stmt_list DEDENT

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT stmt_list DEDENT

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT

   19 parameter_list: parameter "," parameter_list
   20               | parameter

   21 parameter: ID
   22          | ID "@=" expression

   23 literal: INT_LITERAL
   24        | STRING_LITERAL

   25 expression: literal
   26           | FUNCTION_NAME expression_list
   27           | ID "@=" expression

   28 expression_list: expression __0
   29                | /* empty */

   30 stmt_list: print_stmt "\n"

   31 print_stmt: "print" expression_list

   32 __0: /* empty */
   33    | __0 "," expression


Terminals, with rules where they appear

$end (0) 0
"\n" (10) 30
"(" (40) 14
")" (41) 14
":" (58) 9 10 12
error (256)
INT (258)
STRING (259)
ID (260) 17 21 22 27
"@println" (261)
EMPTY (262) 3 11
"@expr_list" (263)
"@literal" (264)
"@module" (265)
"@if_stmt" (266)
"@boolean_stmt" (267)
"@iterable" (268) 17
"@(" (269) 18
"@)" (270) 18
"@:" (271) 16 17 18
"@compare" (272) 13
"@=" (273) 22 27
"@==" (274)
"@>" (275)
"@<" (276)
"@>=" (277)
"@<=" (278)
"," (279) 19 33
DEDENT (280) 9 10 12 16 17 18
DEF (281) 18
FOR (282) 17
IN (283) 17
INDENT (284) 9 10 12 16 17 18
WHILE (285) 16
DICT (286)
FUNCTION_NAME (287) 18 26
LIST (288)
NUMERIC_LITERAL (289)
STRING_LITERAL (290) 24
TUPLE (291)
INT_LITERAL (292) 23
"elif" (293) 10
"else" (294) 12
"if" (295) 9
"print" (296) 31
RAWSTRING (297)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
stmt_list (49)
    on left: 2 3 30, on right: 1 2 9 10 12 16 17 18
stmt (50)
    on left: 4 5 6 7 8, on right: 2
if_stmt (51)
    on left: 9, on right: 4
elif_stmt (52)
    on left: 10 11 12, on right: 9 10
bool_stmt (53)
    on left: 13 14 15, on right: 9 10 12 13 14 16
while_stmt (54)
    on left: 16, on right: 5
for_stmt (55)
    on left: 17, on right: 7
def_stmt (56)
    on left: 18, on right: 6
parameter_list (57)
    on left: 19 20, on right: 18 19
parameter (58)
    on left: 21 22, on right: 19 20
literal (59)
    on left: 23 24, on right: 25
expression (60)
    on left: 25 26 27, on right: 8 13 15 22 27 28 33
expression_list (61)
    on left: 28 29, on right: 26 31
print_stmt (62)
    on left: 31, on right: 30
__0 (63)
    on left: 32 33, on right: 28 33


state 0

    0 $accept: . program $end

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    program     go to state 11
    stmt_list   go to state 12
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 1

   27 expression: ID . "@=" expression

    "@="  shift, and go to state 21


state 2

    3 stmt_list: EMPTY .

    $default  reduce using rule 3 (stmt_list)


state 3

   18 def_stmt: DEF . FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT

    FUNCTION_NAME  shift, and go to state 22


state 4

   17 for_stmt: FOR . ID IN "@iterable" "@:" INDENT stmt_list DEDENT

    ID  shift, and go to state 23


state 5

   16 while_stmt: WHILE . bool_stmt "@:" INDENT stmt_list DEDENT

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "("             shift, and go to state 24

    bool_stmt   go to state 25
    literal     go to state 18
    expression  go to state 26


state 6

   26 expression: FUNCTION_NAME . expression_list

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8

    ID              [reduce using rule 29 (expression_list)]
    FUNCTION_NAME   [reduce using rule 29 (expression_list)]
    STRING_LITERAL  [reduce using rule 29 (expression_list)]
    INT_LITERAL     [reduce using rule 29 (expression_list)]
    $default        reduce using rule 29 (expression_list)

    literal          go to state 18
    expression       go to state 27
    expression_list  go to state 28


state 7

   24 literal: STRING_LITERAL .

    $default  reduce using rule 24 (literal)


state 8

   23 literal: INT_LITERAL .

    $default  reduce using rule 23 (literal)


state 9

    9 if_stmt: "if" . bool_stmt ":" INDENT stmt_list DEDENT elif_stmt

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "("             shift, and go to state 24

    bool_stmt   go to state 29
    literal     go to state 18
    expression  go to state 26


state 10

   31 print_stmt: "print" . expression_list

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8

    $default  reduce using rule 29 (expression_list)

    literal          go to state 18
    expression       go to state 27
    expression_list  go to state 30


state 11

    0 $accept: program . $end

    $end  shift, and go to state 31


state 12

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


state 13

    2 stmt_list: stmt . stmt_list

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    stmt_list   go to state 32
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 14

    4 stmt: if_stmt .

    $default  reduce using rule 4 (stmt)


state 15

    5 stmt: while_stmt .

    $default  reduce using rule 5 (stmt)


state 16

    7 stmt: for_stmt .

    $default  reduce using rule 7 (stmt)


state 17

    6 stmt: def_stmt .

    $default  reduce using rule 6 (stmt)


state 18

   25 expression: literal .

    $default  reduce using rule 25 (expression)


state 19

    8 stmt: expression .

    $default  reduce using rule 8 (stmt)


state 20

   30 stmt_list: print_stmt . "\n"

    "\n"  shift, and go to state 33


state 21

   27 expression: ID "@=" . expression

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8

    literal     go to state 18
    expression  go to state 34


state 22

   18 def_stmt: DEF FUNCTION_NAME . "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT

    "@("  shift, and go to state 35


state 23

   17 for_stmt: FOR ID . IN "@iterable" "@:" INDENT stmt_list DEDENT

    IN  shift, and go to state 36


state 24

   14 bool_stmt: "(" . bool_stmt ")"

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "("             shift, and go to state 24

    bool_stmt   go to state 37
    literal     go to state 18
    expression  go to state 26


state 25

   16 while_stmt: WHILE bool_stmt . "@:" INDENT stmt_list DEDENT

    "@:"  shift, and go to state 38


state 26

   13 bool_stmt: expression . "@compare" bool_stmt
   15          | expression .

    "@compare"  shift, and go to state 39

    $default  reduce using rule 15 (bool_stmt)


state 27

   28 expression_list: expression . __0

    $default  reduce using rule 32 (__0)

    __0  go to state 40


state 28

   26 expression: FUNCTION_NAME expression_list .

    $default  reduce using rule 26 (expression)


state 29

    9 if_stmt: "if" bool_stmt . ":" INDENT stmt_list DEDENT elif_stmt

    ":"  shift, and go to state 41


state 30

   31 print_stmt: "print" expression_list .

    $default  reduce using rule 31 (print_stmt)


state 31

    0 $accept: program $end .

    $default  accept


state 32

    2 stmt_list: stmt stmt_list .

    $default  reduce using rule 2 (stmt_list)


state 33

   30 stmt_list: print_stmt "\n" .

    $default  reduce using rule 30 (stmt_list)


state 34

   27 expression: ID "@=" expression .

    $default  reduce using rule 27 (expression)


state 35

   18 def_stmt: DEF FUNCTION_NAME "@(" . parameter_list "@)" "@:" INDENT stmt_list DEDENT

    ID  shift, and go to state 42

    parameter_list  go to state 43
    parameter       go to state 44


state 36

   17 for_stmt: FOR ID IN . "@iterable" "@:" INDENT stmt_list DEDENT

    "@iterable"  shift, and go to state 45


state 37

   14 bool_stmt: "(" bool_stmt . ")"

    ")"  shift, and go to state 46


state 38

   16 while_stmt: WHILE bool_stmt "@:" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 47


state 39

   13 bool_stmt: expression "@compare" . bool_stmt

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "("             shift, and go to state 24

    bool_stmt   go to state 48
    literal     go to state 18
    expression  go to state 26


state 40

   28 expression_list: expression __0 .
   33 __0: __0 . "," expression

    ","  shift, and go to state 49

    ","       [reduce using rule 28 (expression_list)]
    $default  reduce using rule 28 (expression_list)


state 41

    9 if_stmt: "if" bool_stmt ":" . INDENT stmt_list DEDENT elif_stmt

    INDENT  shift, and go to state 50


state 42

   21 parameter: ID .
   22          | ID . "@=" expression

    "@="  shift, and go to state 51

    $default  reduce using rule 21 (parameter)


state 43

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list . "@)" "@:" INDENT stmt_list DEDENT

    "@)"  shift, and go to state 52


state 44

   19 parameter_list: parameter . "," parameter_list
   20               | parameter .

    ","  shift, and go to state 53

    $default  reduce using rule 20 (parameter_list)


state 45

   17 for_stmt: FOR ID IN "@iterable" . "@:" INDENT stmt_list DEDENT

    "@:"  shift, and go to state 54


state 46

   14 bool_stmt: "(" bool_stmt ")" .

    $default  reduce using rule 14 (bool_stmt)


state 47

   16 while_stmt: WHILE bool_stmt "@:" INDENT . stmt_list DEDENT

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    stmt_list   go to state 55
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 48

   13 bool_stmt: expression "@compare" bool_stmt .

    $default  reduce using rule 13 (bool_stmt)


state 49

   33 __0: __0 "," . expression

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8

    literal     go to state 18
    expression  go to state 56


state 50

    9 if_stmt: "if" bool_stmt ":" INDENT . stmt_list DEDENT elif_stmt

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    stmt_list   go to state 57
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 51

   22 parameter: ID "@=" . expression

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8

    literal     go to state 18
    expression  go to state 58


state 52

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" . "@:" INDENT stmt_list DEDENT

    "@:"  shift, and go to state 59


state 53

   19 parameter_list: parameter "," . parameter_list

    ID  shift, and go to state 42

    parameter_list  go to state 60
    parameter       go to state 44


state 54

   17 for_stmt: FOR ID IN "@iterable" "@:" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 61


state 55

   16 while_stmt: WHILE bool_stmt "@:" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 62


state 56

   33 __0: __0 "," expression .

    $default  reduce using rule 33 (__0)


state 57

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list . DEDENT elif_stmt

    DEDENT  shift, and go to state 63


state 58

   22 parameter: ID "@=" expression .

    $default  reduce using rule 22 (parameter)


state 59

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 64


state 60

   19 parameter_list: parameter "," parameter_list .

    $default  reduce using rule 19 (parameter_list)


state 61

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT . stmt_list DEDENT

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    stmt_list   go to state 65
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 62

   16 while_stmt: WHILE bool_stmt "@:" INDENT stmt_list DEDENT .

    $default  reduce using rule 16 (while_stmt)


state 63

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list DEDENT . elif_stmt

    EMPTY   shift, and go to state 66
    "elif"  shift, and go to state 67
    "else"  shift, and go to state 68

    elif_stmt  go to state 69


state 64

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT . stmt_list DEDENT

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    stmt_list   go to state 70
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 65

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 71


state 66

   11 elif_stmt: EMPTY .

    $default  reduce using rule 11 (elif_stmt)


state 67

   10 elif_stmt: "elif" . bool_stmt ":" INDENT stmt_list DEDENT elif_stmt

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "("             shift, and go to state 24

    bool_stmt   go to state 72
    literal     go to state 18
    expression  go to state 26


state 68

   12 elif_stmt: "else" . bool_stmt ":" INDENT stmt_list DEDENT

    ID              shift, and go to state 1
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "("             shift, and go to state 24

    bool_stmt   go to state 73
    literal     go to state 18
    expression  go to state 26


state 69

    9 if_stmt: "if" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt .

    $default  reduce using rule 9 (if_stmt)


state 70

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 74


state 71

   17 for_stmt: FOR ID IN "@iterable" "@:" INDENT stmt_list DEDENT .

    $default  reduce using rule 17 (for_stmt)


state 72

   10 elif_stmt: "elif" bool_stmt . ":" INDENT stmt_list DEDENT elif_stmt

    ":"  shift, and go to state 75


state 73

   12 elif_stmt: "else" bool_stmt . ":" INDENT stmt_list DEDENT

    ":"  shift, and go to state 76


state 74

   18 def_stmt: DEF FUNCTION_NAME "@(" parameter_list "@)" "@:" INDENT stmt_list DEDENT .

    $default  reduce using rule 18 (def_stmt)


state 75

   10 elif_stmt: "elif" bool_stmt ":" . INDENT stmt_list DEDENT elif_stmt

    INDENT  shift, and go to state 77


state 76

   12 elif_stmt: "else" bool_stmt ":" . INDENT stmt_list DEDENT

    INDENT  shift, and go to state 78


state 77

   10 elif_stmt: "elif" bool_stmt ":" INDENT . stmt_list DEDENT elif_stmt

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    stmt_list   go to state 79
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 78

   12 elif_stmt: "else" bool_stmt ":" INDENT . stmt_list DEDENT

    ID              shift, and go to state 1
    EMPTY           shift, and go to state 2
    DEF             shift, and go to state 3
    FOR             shift, and go to state 4
    WHILE           shift, and go to state 5
    FUNCTION_NAME   shift, and go to state 6
    STRING_LITERAL  shift, and go to state 7
    INT_LITERAL     shift, and go to state 8
    "if"            shift, and go to state 9
    "print"         shift, and go to state 10

    stmt_list   go to state 80
    stmt        go to state 13
    if_stmt     go to state 14
    while_stmt  go to state 15
    for_stmt    go to state 16
    def_stmt    go to state 17
    literal     go to state 18
    expression  go to state 19
    print_stmt  go to state 20


state 79

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list . DEDENT elif_stmt

    DEDENT  shift, and go to state 81


state 80

   12 elif_stmt: "else" bool_stmt ":" INDENT stmt_list . DEDENT

    DEDENT  shift, and go to state 82


state 81

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list DEDENT . elif_stmt

    EMPTY   shift, and go to state 66
    "elif"  shift, and go to state 67
    "else"  shift, and go to state 68

    elif_stmt  go to state 83


state 82

   12 elif_stmt: "else" bool_stmt ":" INDENT stmt_list DEDENT .

    $default  reduce using rule 12 (elif_stmt)


state 83

   10 elif_stmt: "elif" bool_stmt ":" INDENT stmt_list DEDENT elif_stmt .

    $default  reduce using rule 10 (elif_stmt)
